from flask import Flask, render_template, redirect, url_for, request, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_socketio import SocketIO, send, join_room, leave_room
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField
from wtforms.validators import InputRequired, Length
from flask_bcrypt import Bcrypt

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
socketio = SocketIO(app)

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(15), unique=True)
    email = db.Column(db.String(50), unique=True)
    password = db.Column(db.String(80))

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# ... [Include the RegisterForm and LoginForm classes from the previous example]

@app.route('/login', methods=['GET', 'POST'])
def login():
    # ... [Include the login logic from the previous example]
    pass

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    # ... [Include the signup logic from the previous example]
    pass

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat')
@login_required
def chat():
    return render_template('chat.html')

@socketio.on('message')
@login_required
def handleMessage(msg):
    send(msg, room=current_user.id)

@socketio.on('join')
@login_required
def on_join(data):
    room = current_user.id
    join_room(room)
    send(current_user.username + ' has entered the room.', room=room)

@socketio.on('leave')
@login_required
def on_leave(data):
    room = current_user.id
    leave_room(room)
    send(current_user.username + ' has left the room.', room=room)

if __name__ == '__main__':
    db.create_all()
    socketio.run(app, debug=True)
